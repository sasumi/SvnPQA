<?phpnamespace Lite\Core;use Lite\DB\Model;use Lite\Exception\Exception;use function Lite\func\array_clear_null;use function Lite\func\dump;use function Lite\func\is_assoc_array;use function Lite\func\is_function;/** * 视图类，大部分方法用于在模版中直接调用 * 注意：部分方法由于继承于路由，调用这些方法的时候，需考虑是否做htmlspecialchars保护 * User: sasumi * Date: 2015/01/06 * Time: 9:49 */class View extends Router{	const EVENT_AFTER_VIEW_RENDER = 'EVENT_AFTER_VIEW_RENDER';	const REQ_PAGE = 'page';	const REQ_JSON = 'json';	const REQ_JSONP = 'jsonp';	const REQ_FORM_SENDER = 'formsender';	const REQ_IFRAME = 'iframe';	const REQ_DES_KEY = 'ref';	private $req_type;	private static $pre_vars = array();	/** @var \Lite\Core\Result */	private $result;	private $ret_mode = false;	/**	 * 构造方法	 * @param mixed $data 视图渲染数据	 */	public function __construct($data=null){		if($data instanceof Result){			$this->result = $data;		} else if($data instanceof self){			dump($this, $data, 1);		} else {			//默认返回数组情况的标记为"成功"			$this->result = new Result('', true, $data);			$this->ret_mode = true;		}		$this->req_type = $this->parseRequestType();	}	/**	 * display sets	 * @param $value	 * @param $options	 * @param Model $model_instance	 * @return string	 * @internal param $params	 */	public static function displaySet($value, $options, Model $model_instance){		$vs = explode(',',$value);		$t = array();		foreach($vs as $v){			$t[] = $options[$v];		}		$html = '<ul class="tags"><li>'.join('</li><li>',$t).'</li></ul>';		return $html;	}	/**	 * @param $value	 * @param string $name	 * @param array $define	 * @param Model|null $model_instance	 * @return mixed|string	 */	public static function renderFormElement($value, $name, $define, $model_instance=null){		$rel = $define['rel'];		$required = $define['required'];		//default		if(isset($define['default']) && !isset($value)){			$value = $define['default'];		}		if(is_callable($define['options'])){			$define['options'] = call_user_func($define['options'], $model_instance);		}		$html = '';		if(is_callable($define['form'])){			$html = call_user_func($define['form'], $value, $model_instance);		} else {			switch($define['type']){				case 'text':					$html = static::buildElement('textarea', array(						'type' => 'text',						'rel' => $rel,						'name' => $name,						'text' => $value					), $define);					break;				case 'enum':					if(count($define['options']) > 2){						$html = '<select size="1" name="'.$name.'"'.($required ? ' required="required"' : '') .'>';						$html .= static::buildElement('option', array(							'value' => '',							'rel' => $rel,							'text' => '请选择'						), $define);						foreach($define['options'] as $k=>$n){							$attr = array(								'value' => $k,								'text' => $n							);							if($value == $k || (isset($define['default']) && $define['default'] == $k)){								$attr['selected'] = 'selected';							}							$html .= static::buildElement('option', $attr, $define);						}						$html .= '</select>';					} else {						foreach($define['options'] as $k=>$n){							$attr = array(								'type' => 'radio',								'rel' => $rel,								'name' => $name,								'value' => $k							);							if($value == $k || (isset($define['default']) && $define['default'] == $k)){								$attr['checked'] = 'checked';							}							$html .= '<label>'.static::buildElement('input', $attr, $define);							$html .= $n;							$html .= '</label>';						}					}					break;				case 'set':					$vs = explode(',',$value);					if(count($define['options']) > 10){						$html = '<select size="1" name="'.$name.'[]"'.($required ? ' required="required"' : '') .' multiple="multiple">';						foreach($define['options'] as $k=>$n){							$attr = array(								'value' => $k,								'text' => $n							);							if(in_array($k, $vs) || (isset($define['default']) && $define['default'] == $k)){								$attr['selected'] = 'selected';							}							$html .= static::buildElement('option', $attr, $define);						}						$html .= '</select>';					} else {						foreach($define['options'] as $k=>$n){							$attr = array(								'type' => 'checkbox',								'rel' => $rel,								'name' => $name.'[]',								'value' => $k							);							if(in_array($k, $vs) || (isset($define['default']) && $define['default'] == $k)){								$attr['checked'] = 'checked';							}							$html .= '<label>'.static::buildElement('input', $attr, $define);							$html .= $n;							$html .= '</label>';						}					}					break;				case 'int':				case 'float':				case 'double':					if($define['options']){						$html = '<select size="1" name="'.$name.'"'.($required ? ' required="required"' : '').'>';						$html .= static::buildElement('option', array(							'value' => '',							'rel' => $rel,							'text' => '请选择'						), $define);						foreach($define['options'] as $k=>$n){							$attr = array(								'value' => $k,								'text' => $n							);							if($value == $k || (isset($define['default']) && $define['default'] == $k)){								$attr['selected'] = 'selected';							}							$html .= static::buildElement('option', $attr, $define);						}						$html .= '</select>';					} else {						$tmp = array(							'type' => 'number',							'name' => $name,							'rel' => $rel,							'value' => $value						);						if($define['type'] == 'int'){							$tmp['step'] = 1;						}						else if($define['precision']){							$tmp['step'] = '0.'.str_repeat('0', $define['precision']-1).'1';						}						if(isset($define['min'])){							$tmp['min'] = $define['min'];						}						if(isset($define['max'])){							$tmp['max'] = $define['max'];						}						$html = static::buildElement('input', $tmp, $define);					}					break;				case 'file':					$html = static::buildElement('input', array(						'type' => 'file',						'rel' => $rel,						'name' => $name,						'value' => $value					), $define);					break;				case 'string':					$attr = array(						'type' => 'text',						'rel' => $rel,						'name' => $name,						'value' => $value,					);					$pattern = self::getPattern($define);					if($pattern){						$attr['pattern'] = $pattern;					}					$html = static::buildElement('input', $attr, $define);					break;				default:					$attr = array(						'type' => $define['type'] ?: 'text',						'rel' => $rel,						'name' => $name,						'value' => $value					);					$pattern = self::getPattern($define);					if($pattern){						$attr['pattern'] = $pattern;					}					$html = static::buildElement('input', $attr, $define);					break;			}		}		return $html;	}	/**	 * 获取html pattern	 * @param $define	 * @return string	 */	private static function getPattern($define){		switch($define['type']){			case 'datetime':				return'^\d{4}-\d{1,2}-\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}$';			case 'date':				return '^\d{4}\-\d{1,2}\-\d{1,2}$';			case 'time':				return '^\d{1,2]:\d{1,2}:\d{1,2}$';		}		return '';	}	/**	 * 构建元素属性	 * @param $tag	 * @param array $attributes	 * @param array $define	 * @return string	 */	public static function buildElement($tag, $attributes=array(), $define=array()){		$tag = strtolower($tag);		$single_tag = in_array($tag, array('input', 'img'));		$html = "<$tag ";		$attributes = array_clear_null($attributes);		$text = addslashes($attributes['text']);		unset($attributes['text']);		foreach($attributes as $k=>$v){			if($k == 'pattern'){				$html .= " $k=\"".$v."\"";			} else {				$html .= " $k=\"".addslashes($v)."\"";			}		}		if($define['required']){			$html .= ' required="required"';		}		$html .= $single_tag ? "/>" : ">".$text."</$tag>";		return $html;	}	/**	 * 遍历显示的字段	 * @param $callback callback(alias, value, field_name)	 * @param \Lite\DB\Model $model_instance	 * @param array $fields	 */	public static function walkDisplayProperties(callable $callback, Model $model_instance=null, $fields=array()){		if(!$model_instance){			return;		}		$defines = $model_instance->getPropertiesDefine();		if($fields){			foreach($fields as $field){				$alias = $defines[$field]['alias'];				if($alias){					call_user_func($callback, $alias, static::displayField($field, $model_instance), $field);				}			}		} else {			foreach($defines as $field=>$define){				if(!$define['primary']){					$alias = $defines[$field]['alias'];					if($alias){						call_user_func($callback, $alias, static::displayField($field, $model_instance), $field);					}				}			}		}	}	/**	 * display field	 * @param string $field	 * @param Model $model_instance	 * @return string	 */	public static function displayField($field, Model $model_instance){		$define = $model_instance->getPropertiesDefine($field);		$value = $model_instance->$field;		if($define['display']){			if(is_callable($define['display'])){				$define['display'] = call_user_func($define['display'], $model_instance);			}			return $define['display'];		}		if($define['options']){			if(is_callable($define['options'])){				$define['options'] = call_user_func($define['options'], $model_instance);			}			if($define['type'] == 'set'){				return static::displaySet($value, $define['options'], $model_instance);			} else {				$value = $define['options'][$value];			}		}		switch($define['type']){			//hide password display in form field			case 'password':				return '******';			case 'text':			case 'float':			case 'double':			case 'int':				return $value;				break;			case 'file':				return $value;			case 'date':			case 'datetime':				if(strpos($value, '0000-00-00') !== false){					return '-';				}				return $value;			case 'timestamp':				if($value == 0){					return '-';				}				return $value;			case 'set':			case 'enum':			default:				return $value;		}	}	/**	 * 渲染视图数据	 * @param string||array $key	 * @param string $val	 */	public function assign($key, $val=null){		if(isset($val)){			$this->result->setItem($key, $val);		} else {			foreach($key as $k=>$v){				$this->result->setItem($k, $v);			}		}	}	/**	 * 预渲染视图数据，用于系统全局前置变量的渲染	 * @param array $pre_vars	 */	public static function preAssignVar(array $pre_vars){		self::$pre_vars = array_merge(self::$pre_vars, $pre_vars);	}	/**	 * 获取前置视图变量	 * @return array	 */	public static function getPreVar(){		return self::$pre_vars;	}	/**	 * 解析请求类型	 * @return string	 */	private function parseRequestType(){		$type = Router::get(self::REQ_DES_KEY);		if(empty($type) || !in_array($type, array(self::REQ_FORM_SENDER , self::REQ_JSON, self::REQ_JSONP, self::REQ_IFRAME, self::REQ_PAGE))){			$type = self::REQ_PAGE;		}		return $type;	}	/**	 * 获取请求类型	 * @return string	 */	public function getRequestType(){		return $this->req_type;	}	/**	 * 设置渲染数据	 * @param Result $result	 */	public function setResult(Result $result){		$this->result = $result;	}	/**	 * 获取渲染的数据	 * @return Result	 */	public function getResult(){		return $this->result;	}	/**	 * 获取数据	 * @param null $key	 * @return array	 */	public function getData($key=null){		$data = array();		if($this->result->getData()){			$data = array_merge(self::$pre_vars, $this->result->getData());		}		if(!$key){			return $data;		}		return $data[$key];	}	/**	 * 渲染模版	 * @param string $file 文件名称	 * @param bool $return 是否以返回方式返回渲染结果	 * @param null $req_type 请求类型，缺省采用自动解析请求类型	 * @return string	 */	public function render($file=null, $return=false, $req_type=null){		$result = $this->result;		$jump_url = $result->getJumpUrl();		$message = $result->getMessage();		$html = '';		if($req_type === null || !in_array($req_type, array(self::REQ_FORM_SENDER , self::REQ_JSON, self::REQ_JSONP, self::REQ_IFRAME, self::REQ_PAGE))){			$req_type = $this->req_type;		}		switch($req_type){			case self::REQ_FORM_SENDER:				$html = $result->getIframeResponse();				break;			case self::REQ_JSON:				$html = $result->getJson();				break;			case self::REQ_JSONP:				$html = $result->getJsonp();				break;			case self::REQ_PAGE:			case self::REQ_IFRAME:			default:				$data = $result->getData();				//support pure string mode				if(is_scalar($data)){					echo $data;					break;				}				$file = static::resolveTemplate($file);				if($file){					ob_start();					if(is_array(self::$pre_vars)){						extract(self::$pre_vars);					}					if(is_array($data)){						extract($data);					}					include $file;					$html = ob_get_contents();					ob_clean();				}				if($this->req_type == self::REQ_PAGE && $this->ret_mode){					//页面模式+纯数据,不补充js交互				} else if($message || $jump_url){					$html .= '<script>';					$html .= ($message?'alert("'.addslashes($message).'");':'');					$html .= ($jump_url ? 'location.href="'.addslashes($jump_url).'";' : '');					$html .= '</script>';				}				break;		}		//引用方式抛事件		$ref_param = new RefParam(array('html'=>$html, 'return'=>$return));		Hooker::fire(self::EVENT_AFTER_VIEW_RENDER, $ref_param);		if($return){			return $ref_param['html'];		} else {			echo $ref_param['html'];			return '';		}	}	/**	 * 获取模版文件路径	 * @param string $file_name	 * @return string 文件路径	 */	public static function resolveTemplate($file_name=null){		$tpl_path = Config::get('app/tpl');		if(is_file($file_name)){			return $file_name;		}		if($file_name){			$file_name = trim(str_replace(array('/','\\'), DS, $file_name), DS);			return $tpl_path.$file_name;		}		$controller = self::getController();		$action = self::getAction();		if($controller == self::getDefaultController() &&			$action == self::getDefaultAction()){			$file = 'index.php';		} else if($action == self::getDefaultAction()){			$file = $controller.'.php';		} else {			$file = $controller.'_'.$action.'.php';		}		$file = Config::get('app/tpl').strtolower($file);		$file2 = Config::get('app/tpl').strtolower($controller.DS.$action).'.php';		return is_file($file) ? $file : (			is_file($file2) ? $file2 : ''		);	}	/**	 * 获取静态资源url，重载路由方法，保护html输出	 * @param string $file_name	 * @param null $type	 * @return string	 */	public static function getStaticUrl($file_name, $type = null){		$url = call_user_func_array('parent::getStaticUrl', func_get_args());		return htmlspecialchars($url);	}	/**	 * 获取url，重载路由方法，保护html输出	 * @param string $target	 * @param array $params	 * @param null $router_mode	 * @return string	 */	public static function getUrl($target = '', $params = array(), $router_mode = null){		$url = call_user_func_array('parent::getUrl', func_get_args());		return htmlspecialchars($url);	}	/**	 * 获取js资源url，重载路由方法，保护html输出	 * @param string $file_name	 * @return string	 */	public static function getJsUrl($file_name){		$url = call_user_func_array('parent::getJsUrl', func_get_args());		return htmlspecialchars($url);	}	/**	 * 调用css路径，重载路由方法，保护html输出	 * @param string $css	 * @return string	 */	public static function getCssUrl($css) {		$url = call_user_func_array('parent::getCssUrl', func_get_args());		return htmlspecialchars($url);	}	/**	 * 调用img路径，重载路由方法，保护html输出	 * @param string $file_name	 * @return string	 */	public static function getImgUrl($file_name) {		$url = call_user_func_array('parent::getImgUrl', func_get_args());		return htmlspecialchars($url);	}	/**	 * 调用flash路径，重载路由方法，保护html输出	 * @param string $file_name	 * @return string	 */	public static function getFlashUrl($file_name) {		$url = call_user_func_array('parent::getFlashUrl', func_get_args());		return htmlspecialchars($url);	}	/**	 * 获取脚本链接代码	 * @param string||array $js	 * @return string	 **/	public static function getJs($js/**, $js2, $js3...*/){		$args = func_get_args();		$rst = '';		foreach($args as $js){			if(gettype($js) == 'string'){				if(stripos('/', $js) === false){					$js = static::getJsUrl($js);				}				$rst .= '<script type="text/javascript" src="'.$js.'" charset="utf-8"></script>';			} else {				$sc = '<script type="text/javascript"';				foreach($js as $pro=>$val){					if(strtolower($pro) == 'src'){						$sc .= ' src="'.static::getJsUrl($val).'"';					} else {						$sc .= ' '.htmlspecialchars($pro).'="'.htmlspecialchars($val).'"';					}				}				$sc .= '></script>';				$rst .= $sc;			}		}		return $rst;	}	/**	 * 获取样式表链接代码	 * @param string||array $css	 * @return string	 **/	public static function getCss($css/**, $css2, $css3...*/){		$args = func_get_args();		$rst = '';		foreach($args as $css){			if(gettype($css) == 'string'){				$rst .= '<link rel="stylesheet" type="text/css" href="'.htmlspecialchars(static::getCssUrl($css)).'" media="all"/>';			} else {				$lnk = '<link rel="stylesheet" type="text/css"';				foreach($css as $pro=>$val){					if(strtolower($pro) == 'href'){						$lnk .= ' href="'.static::getCssUrl($val).'"';					} else {						$lnk .= ' '.htmlspecialchars($pro).'="'.htmlspecialchars($val).'"';					}				}				$lnk .= '/>';				$rst .= $lnk;			}		}		return $rst;	}	/**	 * 获取配置	 * @param $key	 * @return array|null	 */	public static function getConfig($key){		return Config::get($key);	}	/**	 * 获取IMG代码	 * @param string $src 图片src	 * @param array $option 选项	 * @return string	 */	public static function getImg($src, $option=array()){		if(!$src){			return '';		}		$ext = '';		$adjust = false;		$src = static::getImgUrl($src);		$option = array_merge(array(			'onload' => '(function(img){window.__img_adjust__ &&　__img_adjust__(img);})(this)',			'onerror' => '(function(img){window.__img_error__ &&　__img_error__(img);})(this)',		), $option);		$onload_fn = $option['onload'];		foreach($option as $key=>$val){			if(preg_match("/(min-height|min-width|max-height|max-width)/i", $key)){				$adjust = true;				$key = 'data-'.$key;			}			$ext .= ' '.htmlspecialchars($key).'="'.htmlspecialchars($val).'"';		}		return "<img src=\"".$src."\" $ext ".($adjust ? " onload=\"$onload_fn(this)\"" : "")."/>";	}	/**	 * 打印异常信息	 * @param Exception $exception	 */	public function print_exception(Exception $exception){		$msg = $exception->getMessage();		$code = $exception->getCode();		$file = $exception->getFile();		$line = $exception->getLine();		echo "<b style=\"font-size:24px\">$msg<br/>[$code]</b><br/>";		echo $file." [$line]";		echo '<pre style="font-size:12px; color:gray">';		dump($exception);	}	/**	 * 判断是不是手机访问	 * @return bool	 */	public static function isMobile(){		// 如果有HTTP_X_WAP_PROFILE则一定是移动设备		if(isset ($_SERVER['HTTP_X_WAP_PROFILE'])){			return true;		}		// 如果via信息含有wap则一定是移动设备,部分服务商会屏蔽该信息		if(isset ($_SERVER['HTTP_VIA'])){			// 找不到为false,否则为true			return stristr($_SERVER['HTTP_VIA'], "wap") ? true : false;		}		// 脑残法，判断手机发送的客户端标志,兼容性有待提高		if(isset ($_SERVER['HTTP_USER_AGENT'])){			$client_keywords = array('nokia',				'sony',				'ericsson',				'mot',				'samsung',				'htc',				'sgh',				'lg',				'sharp',				'sie-',				'philips',				'panasonic',				'alcatel',				'lenovo',				'iphone',				'ipod',				'blackberry',				'meizu',				'android',				'netfront',				'symbian',				'ucweb',				'windowsce',				'palm',				'operamini',				'operamobi',				'openwave',				'nexusone',				'cldc',				'midp',				'wap',				'mobile'			);			// 从HTTP_USER_AGENT中查找手机浏览器的关键字			if(preg_match("/(" . implode('|', $client_keywords) . ")/i", strtolower($_SERVER['HTTP_USER_AGENT']))){				return true;			}		}		// 协议法，因为有可能不准确，放到最后判断		if(isset ($_SERVER['HTTP_ACCEPT'])){			// 如果只支持wml并且不支持html那一定是移动设备			// 如果支持wml和html但是wml在html之前则是移动设备			if((strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') !== false) && (strpos($_SERVER['HTTP_ACCEPT'], 'text/html') === false || (strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') < strpos($_SERVER['HTTP_ACCEPT'], 'text/html')))){				return true;			}		}		return false;	}}